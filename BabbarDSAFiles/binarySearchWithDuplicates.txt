class Solution {
    public boolean search(int[] nums, int target) {
        //lets find pivot


        int start = 0;
        int end = nums.length-1;


       while(start<=end){
           int mid = start + (end-start)/2;

           if(nums[mid]==target)
                return true;
            else if(nums[mid]>nums[end]){
                if(target>=nums[start] && target<nums[mid])
                    end=mid-1;
                else
                    start=mid+1;
            }
            else if(nums[mid]<nums[end]){
                if(target<=nums[end] && target>nums[mid])
                    start=mid+1;    
                else
                    end=mid-1;
            }
            else end--;
       }
       return false;




















        
        // int max = nums[0];
        // int index = 0;
        // for(int i=1;i<nums.length;i++){
        //     if(max<=nums[i]){
        //         max=nums[i];
        //         index=i;
        //     }
        //     else
        //         break;
        // }


// if(target>=nums[0]){
//             end = index;
//         }
//         else{
//             start = index+1;
//         }



//         while(start<=end){
//             int mid = start + (end-start)/2;

//             if(nums[mid]==target)
//                 return true;
//             else if(target<nums[mid])
//                 end=mid-1;
//             else
//                 start = mid+1;
//         }
//         return false;
    }


    // public static int findPivot(int[] nums){
    //     int start=0;
    //     int end=nums.length-1;

    //     while(start<end){
    //         int mid = start + (end-start)/2;
    //         if(target==nums[mid])
    //             return true;

    //         else if(nums[mid]>nums[end]){
    //             if(target<nums[mid] && target>=nums[start])
    //                 end=mid-1;
    //             else
    //                 start=mid+1;
    //         }
    //         else if(nums[mid]<nums[end]){
    //             if(target>nums[mid] && target<=nums[end])
    //                 start=mid+1;
    //             else
    //                 end=mid-1;
    //         }
    //         else 
    //             end--;
    //     }
    //     return start;
    // }

    // public static boolean binarySearch(int[] nums,int start,int end,int target){

    //     while(start<=end){
    //         int mid = start+(end-start)/2;
    //         if(nums[mid]==target)
    //             return true;
    //         else if(target<nums[mid])
    //             end=mid-1;
    //         else
    //             start=mid+1;
    //     }
    //     return false;
    // }
}


