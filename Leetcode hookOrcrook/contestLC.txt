2860. Happy Students


You are given a 0-indexed integer array nums of length n where n is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.

The ith student will become happy if one of these two conditions is met:

The student is selected and the total number of selected students is strictly greater than nums[i].
The student is not selected and the total number of selected students is strictly less than nums[i].
Return the number of ways to select a group of students so that everyone remains happy.

Example 1:

Input: nums = [1,1]
Output: 2
Explanation: 
The two possible ways are:
The class teacher selects no student.
The class teacher selects both students to form the group. 
If the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.
Example 2:

Input: nums = [6,0,3,3,6,7,2,7]
Output: 3
Explanation: 
The three possible ways are:
The class teacher selects the student with index = 1 to form the group.
The class teacher selects the students with index = 1, 2, 3, 6 to form the group.
The class teacher selects all the students to form the group.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] < nums.length

==========
currently out of league... as of Sep 17th, will come back later//
Sep 18: Update.. We solved it.. after sorting the array, it was easy.
Simple Solution | N*Log(N) | Sorting | Greedy

class Solution {
    public int countWays(List<Integer> nums) {
        
        //sorting
        
        Collections.sort(nums);
        
        int studentSelectedCount=0;
        int countWays=0;
        
        for(int i=0;i<nums.size();i++){
            studentSelectedCount++;
            if(studentSelectedCount>nums.get(i)){
                // since its sorted we only need to check the immediate next unselected student
                if(i+1<nums.size() && studentSelectedCount<nums.get(i+1))        
                    countWays++;
                else if(i+1==nums.size()) //last student
                    countWays++;
            }
        }
        
        if(nums.get(0)>0){
                countWays++;
            }
        
        return countWays;
    }
    
   
}


===================
currently out of league. sep 19 (Binary search)
https://leetcode.com/problems/maximum-number-of-alloys/description/


//We shall keep doubt session seperately, after class -  25Sep'23
//we need to learn type conversion


// Difference between '>>' & '>>>'? 
ans"
In C/C++ there is only one right shift operator ‘>>’ which should be used only for positive integers or unsigned integers.
There are two types of right shift operator in Java.
1)>> Signed Right shift operator: Here if the number is negative, the filler will be '1' and if number is positive filler will be '0'.
2)>>> Unsigned Right shift operator.In Java, the operator ‘>>>’ denotes unsigned right shift operator and always fill 0 irrespective of the sign of the number.





//		Scanner sc = new Scanner(System.in);// we have to import scanner but stringBuilder??

1 <= maxHeights[i] <= 10pow9
List<Integer> maxHeights // how can Integer type hold till 10pow9?? shouldn't it be long

//We need to clear typeconversion, autoboxing etc doubts
//even after typecasting how can int hold 1e9? (1 times 10pow9)

contest 364
solved medium problem yay!
to do watch other's code


